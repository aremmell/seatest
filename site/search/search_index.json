{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":""},{"location":"#evaluators","title":"Evaluators","text":"<p>seatest evaluators make writing tests less painful. They provide a straightforward yet verbose way to express what the results of your tests should be\u2014in a granular fashion. Each evaluator ultimately boils down to a truthy statement about the expression and/or data passed into it. At each step of your test, its state can be positively confirmed to either be correct or incorrect.</p> <p>If an evaluator represents a false expression, an error message is emitted which includes the evaluator's name, the line of code at which the expression resides, and the expression that evaluated to false.</p> <p>Upon the failure of any evaulator (with the exception of ST_EXPECT), the test is marked as failed.</p>"},{"location":"#special","title":"Special","text":"Evaluator Expression ST_EXPECT Any truthy expression. Unlike all other evaluators, marks the test with a warning instead of an error if the expression passed to it evaluates to false"},{"location":"#general-purpose","title":"General Purpose","text":"Evaluator Expression ST_TRUE <code>any truthy expression</code> ST_FALSE <code>!(any truthy expression)</code> ST_EQUAL <code>lhs == rhs</code> ST_NOT_EQUAL <code>lhs != rhs</code> ST_LESS_THAN <code>lhs &lt; rhs</code> ST_LESS_THAN_OR_EQUAL <code>lhs &lt;= rhs</code> ST_GREATER_THAN <code>lhs &gt; rhs</code> ST_GREATER_THAN_OR_EQUAL <code>lhs &gt;= rhs</code> ST_NULL <code>ptr == NULL</code> ST_NOT_NULL <code>ptr != NULL</code>"},{"location":"#bitwise","title":"Bitwise","text":"Evaluator Expression ST_BITS_HIGH <code>(bitmask &amp; bits) == bits</code> ST_BITS_LOW <code>(bitmask &amp; bits) == 0</code> ST_BITWISE_EQUAL <code>memcmp(&amp;lhs, &amp;rhs, size) == 0</code> ST_BITWISE_NOT_EQUAL <code>memcmp(&amp;lhs, &amp;rhs, size) != 0</code> ST_BITWISE_ZEROED <code>all bytes == 0</code> ST_BITWISE_NOT_ZEROED <code>any byte != 0</code>"},{"location":"#string","title":"String","text":"Evaluator Expression ST_STR_EMPTY <code>str == NULL \\|\\| *(str) == '\\0'</code> ST_STR_NOT_EMPTY <code>str != NULL &amp;&amp; *str != '\\0'</code> ST_STR_EQUAL <code>strcmp(str1, str2) == 0</code> ST_STR_NOT_EQUAL <code>strcmp(str1, str2) != 0</code> ST_STR_EQUAL_I <code>strcasecmp/StrCmpI(str1, str2) == 0</code> ST_STR_NOT_EQUAL_I <code>strcasecmp/StrCmpI(str1, str2) != 0</code> ST_STR_CONTAINS <code>strstr/StrStr(needle, haystack) != NULL</code> ST_STR_NOT_CONTAINS <code>strstr/StrStr(needle, haystack) == NULL</code> ST_STR_CONTAINS_I <code>strcasestr/StrStrI(needle, haystack) != NULL</code> ST_STR_NOT_CONTAINS_I <code>strcasestr/StrStrI(needle, haystack) == NULL</code> ST_STR_BEGINSWITH <code>strncmp/StrCmpN(needle, haystack, needle_len) == 0</code> ST_STR_NOT_BEGINSWITH <code>strncmp/StrCmpN(needle, haystack, needle_len) != 0</code> ST_STR_BEGINSWITH_I <code>strncasecmp/StrCmpNI(needle, haystack, needle_len) == 0</code> ST_STR_NOT_BEGINSWITH_I <code>strncasecmp/StrCmpNI(needle, haystack, needle_len) != 0</code> ST_STR_BEGINSWITH_WSPACE <code>isspace(str[0])</code> ST_STR_NOT_BEGINSWITH_WSPACE <code>!isspace(str[0])</code> ST_STR_ENDSWITH <code>strncmp/StrCmpN(haystack + (haystack_len - needle_len), needle_len) == 0</code> ST_STR_NOT_ENDSWITH <code>strncmp/StrCmpN(haystack + (haystack_len - needle_len), needle_len) != 0</code> ST_STR_ENDSWITH_I <code>strncasecmp/StrCmpNI(haystack + (haystack_len - needle_len), needle_len) == 0</code> ST_STR_NOT_ENDSWITH_I <code>strncasecmp/StrCmpNI(haystack + (haystack_len - needle_len), needle_len) != 0</code> ST_STR_ENDSWITH_WSPACE <code>isspace(p[strlen(p) - 1])</code> ST_STR_NOT_ENDSWITH_WSPACE <code>!isspace(p[strlen(p) - 1])</code> ST_STR_ALPHA <code>foreach(str) =&gt; isalpha</code> ST_STR_NUMERIC <code>foreach(str) =&gt; isdigit</code> ST_STR_ALPHANUMERIC <code>foreach(str) =&gt; isalnum</code>"},{"location":"#numeric","title":"Numeric","text":"Evaluator Expression ST_NUM_POSITIVE <code>num &gt; 0</code> ST_NUM_NEGATIVE <code>num &lt; 0</code> ST_NUM_EVEN <code>num % 2 == 0</code> ST_NUM_ODD <code>num % 2 != 0</code> ST_NUM_MULTIPLE_OF <code>num % exp == 0</code> ST_NUM_NOT_MULTIPLE_OF <code>num % exp != 0</code> ST_NUM_IN_RANGE <code>num &gt;= low &amp;&amp; num &lt;= high</code> ST_NUM_NOT_IN_RANGE <code>num &lt; low \\|\\| num &gt; high</code>"},{"location":"#array","title":"Array","text":"Evaluator Expression ST_ARRAY_EQUAL <code>sizeof(arr1[0]) == sizeof(arr2[0]) &amp;&amp; count1 == count2 &amp;&amp; all elems ==</code> ST_ARRAY_NOT_EQUAL <code>sizeof(arr1[0]) != sizeof(arr2[0])</code> ST_ARRAY_CONTAINS <code>sizeof(arr[0]) == sizeof(val) &amp;&amp; any elem == val</code> ST_ARRAY_NOT_CONTAINS <code>sizeof(arr[0]) != sizeof(val) &amp;&amp; all elems != val</code> ST_ARRAY_UNIQUE <code>foreach(arr) =&gt; (n) foreach(arr) =&gt; (j) arr[n] != arr[j]</code>"},{"location":"#helpers","title":"Helpers","text":"Helper Description ST_DEBUG If <code>ST_DEBUG_MESSAGES</code> is defined, emits a diagnotic message in gray ST_MESSAGE Emits an informative message ST_SUCCESS Emits a message in green ST_WARNING Emits a message in orange ST_ERROR Emits a message in red ST_TEST_IS_FAILED Returns true if any errors have occurred during the execution of the test ST_TEST_IS_PASSING Returns true if no errors have occurred during the excecution of the test ST_TEST_LAST_EVAL_FALSE Returns true if the very last evaluator to execute resulted in a false expression ST_TEST_ERROR_COUNT Returns the number of errors that have occurred during the excecution of the test ST_TEST_WARNING_COUNT Returns the number of warnings that have occurred during the excecution of the test ST_TEST_EXIT_IF_FAILED Exits immediately from the test if any errors have occurred ST_OS_ERROR_MSG Emits a formatted error message describing an OS/libc error that occcurred"},{"location":"#preprocessor-macros","title":"Preprocessor macros","text":"Macro Description ST_SIMULATE_FS_ERROR Simulates a failure to determine available disk space ST_SIMULATE_FS_INSUFFICIENT Simulates a low disk space condition (mutually exclusive with ST_SIMULATE_FS_ERROR) ST_SIMULATE_INET_ERROR Simulates a failure to detect an Internet connection ST_DEBUG_MESSAGES Enables the diagnostic output to the terminal"}]}